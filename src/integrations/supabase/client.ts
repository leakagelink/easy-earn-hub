
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://umujwqxhlhbcchorzfaa.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVtdWp3cXhobGhiY2Nob3J6ZmFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyMjQwNzIsImV4cCI6MjA2NTgwMDA3Mn0.iCWNFYyhpodvgrFCk9iTg7J8j-CRhVGLUJX9mWdfl9M";

// Clean, simple Supabase client configuration
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  }
});

// Simple connection test utility
export const testConnection = async () => {
  try {
    console.log('üîç Testing Supabase connection...');
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error('‚ùå Connection test failed:', error);
      return { success: false, error: error.message };
    }
    console.log('‚úÖ Supabase connection successful');
    return { success: true };
  } catch (error: any) {
    console.error('üí• Connection test error:', error);
    return { success: false, error: error.message };
  }
};

// Clean auth state utility
export const cleanAuthState = () => {
  try {
    console.log('üßπ Cleaning auth state...');
    // Clear all Supabase auth keys
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('sb-') || key.includes('supabase.auth')) {
        localStorage.removeItem(key);
      }
    });
    console.log('‚úÖ Auth state cleaned');
  } catch (error) {
    console.error('‚ùå Error cleaning auth state:', error);
  }
};
