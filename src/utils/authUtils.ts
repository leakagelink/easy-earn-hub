
import { supabase } from '@/integrations/supabase/client';
import { retryWithExponentialBackoff, testNetworkQuality } from './networkUtils';

export interface AuthResult {
  success: boolean;
  error?: string;
  needsRetry?: boolean;
  networkIssue?: boolean;
}

// Powerful cleanup function
const powerfulAuthCleanup = async () => {
  try {
    console.log('üßπ POWERFUL AUTH CLEANUP Starting...');
    
    // Clear ALL possible auth keys
    const allKeys = Object.keys(localStorage);
    const authKeys = allKeys.filter(key => 
      key.startsWith('supabase.auth.') || 
      key.includes('sb-') ||
      key.includes('auth.') ||
      key.includes('session')
    );
    
    console.log('üóëÔ∏è Removing auth keys:', authKeys);
    authKeys.forEach(key => localStorage.removeItem(key));
    
    // Also clear sessionStorage
    const sessionKeys = Object.keys(sessionStorage || {});
    const authSessionKeys = sessionKeys.filter(key => 
      key.startsWith('supabase.') || key.includes('auth')
    );
    authSessionKeys.forEach(key => sessionStorage.removeItem(key));
    
    // Force signout (don't wait for it to complete)
    try {
      await Promise.race([
        supabase.auth.signOut({ scope: 'global' }),
        new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 2000))
      ]);
      console.log('‚úÖ Global signout completed');
    } catch (e) {
      console.log('‚ö†Ô∏è Signout timeout/error - continuing anyway');
    }
    
    console.log('‚úÖ POWERFUL CLEANUP Complete');
  } catch (error) {
    console.error('‚ùå Cleanup error (continuing anyway):', error);
  }
};

// Enhanced registration with network diagnostics
export const enhancedRegister = async (
  email: string, 
  password: string, 
  phone: string, 
  referralCode?: string
): Promise<AuthResult> => {
  console.log('üöÄ ENHANCED REGISTRATION Starting for:', email);
  
  try {
    // First test network quality
    const networkTest = await testNetworkQuality();
    console.log('üåê Network quality:', networkTest);
    
    if (!networkTest.canReachSupabase) {
      return { 
        success: false, 
        error: 'Supabase server ‡§§‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§™‡§π‡•Å‡§Ç‡§ö ‡§™‡§æ ‡§∞‡§π‡•á‡•§ Internet ‡§Ø‡§æ Supabase configuration check ‡§ï‡§∞‡•á‡§Ç‡•§',
        networkIssue: true,
        needsRetry: true
      };
    }
    
    // Cleanup first
    await powerfulAuthCleanup();
    
    // Validation
    if (!email.includes('@')) {
      return { success: false, error: '‡§∏‡§π‡•Ä email address ‡§°‡§æ‡§≤‡•á‡§Ç‡•§' };
    }
    
    if (password.length < 6) {
      return { success: false, error: 'Password ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 6 characters ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§' };
    }
    
    if (phone.length < 10) {
      return { success: false, error: '‡§∏‡§π‡•Ä phone number ‡§°‡§æ‡§≤‡•á‡§Ç‡•§' };
    }

    console.log('‚úÖ Validation passed, attempting registration with retry...');

    // Registration with retry mechanism
    const result = await retryWithExponentialBackoff(async () => {
      return await supabase.auth.signUp({
        email: email.trim().toLowerCase(),
        password: password.trim(),
        options: {
          emailRedirectTo: `${window.location.origin}/`,
          data: {
            phone: phone.trim(),
            referral_code: referralCode?.trim() || '',
          }
        }
      });
    }, 3, 1000);

    if (result.error) {
      console.error('‚ùå Registration error:', result.error);
      return { 
        success: false, 
        error: getHindiErrorMessage(result.error),
        needsRetry: shouldRetryError(result.error)
      };
    }

    if (result.data.user) {
      console.log('‚úÖ Registration successful:', result.data.user.email);
      
      if (!result.data.session) {
        console.log('üìß Email confirmation required or signup complete');
        return { 
          success: true, 
          error: 'Account ‡§¨‡§® ‡§ó‡§Ø‡§æ ‡§π‡•à! ‡§Ö‡§¨ login ‡§ï‡§∞‡•á‡§Ç‡•§' 
        };
      }
    }

    return { success: true };

  } catch (error: any) {
    console.error('üí• Registration completely failed:', error);
    return { 
      success: false, 
      error: getHindiErrorMessage(error),
      needsRetry: shouldRetryError(error),
      networkIssue: error.name === 'TypeError' && error.message.includes('fetch')
    };
  }
};

// Enhanced login with network diagnostics
export const enhancedLogin = async (email: string, password: string): Promise<AuthResult> => {
  console.log('üîë ENHANCED LOGIN Starting for:', email);
  
  try {
    // Network test first
    const networkTest = await testNetworkQuality();
    console.log('üåê Network quality:', networkTest);
    
    if (!networkTest.canReachSupabase) {
      return { 
        success: false, 
        error: 'Supabase server ‡§§‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§™‡§π‡•Å‡§Ç‡§ö ‡§™‡§æ ‡§∞‡§π‡•á‡•§ Site URL configuration check ‡§ï‡§∞‡•á‡§Ç‡•§',
        networkIssue: true,
        needsRetry: true
      };
    }
    
    // Cleanup first
    await powerfulAuthCleanup();
    
    console.log('‚úÖ Starting login with retry mechanism...');

    const result = await retryWithExponentialBackoff(async () => {
      return await supabase.auth.signInWithPassword({
        email: email.trim().toLowerCase(),
        password: password.trim(),
      });
    }, 3, 1000);

    if (result.error) {
      console.error('‚ùå Login error:', result.error);
      return { 
        success: false, 
        error: getHindiErrorMessage(result.error),
        needsRetry: shouldRetryError(result.error)
      };
    }

    if (result.data.user) {
      console.log('‚úÖ Login successful:', result.data.user.email);
    }

    return { success: true };

  } catch (error: any) {
    console.error('üí• Login completely failed:', error);
    return { 
      success: false, 
      error: getHindiErrorMessage(error),
      needsRetry: shouldRetryError(error),
      networkIssue: error.name === 'TypeError' && error.message.includes('fetch')
    };
  }
};

// Enhanced Hindi error messages
const getHindiErrorMessage = (error: any): string => {
  const message = error.message || error.toString();
  console.log('üîç Error analysis:', { message, code: error.code, status: error.status });
  
  // Network specific errors
  if (message.includes('Failed to fetch') || message.includes('NetworkError')) {
    return 'Network connection failed‡•§ Internet check ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ VPN try ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('CORS') || message.includes('cross-origin')) {
    return 'Server configuration issue‡•§ Supabase Dashboard ‡§Æ‡•á‡§Ç Site URL correct ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('fetch')) {
    return 'Server connection failed‡•§ Browser refresh ‡§ï‡§∞‡§ï‡•á ‡§´‡§ø‡§∞ try ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  // Auth specific errors
  if (message.includes('Invalid login credentials')) {
    return '‡§ó‡§≤‡§§ email ‡§Ø‡§æ password ‡§π‡•à‡•§ ‡§∏‡§π‡•Ä details ‡§°‡§æ‡§≤‡•á‡§Ç‡•§';
  }
  
  if (message.includes('User already registered')) {
    return '‡§Ø‡§π email ‡§™‡§π‡§≤‡•á ‡§∏‡•á registered ‡§π‡•à‡•§ Login ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('Email not confirmed')) {
    return 'Account ‡§¨‡§® ‡§ó‡§Ø‡§æ ‡§π‡•à! ‡§Ö‡§¨ login ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('signup is disabled')) {
    return 'Registration temporarily ‡§¨‡§Ç‡§¶ ‡§π‡•à‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('rate limit') || message.includes('too many')) {
    return '‡§¨‡§π‡•Å‡§§ ‡§ú‡§≤‡•ç‡§¶‡•Ä try ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ 2 ‡§Æ‡§ø‡§®‡§ü ‡§¨‡§æ‡§¶ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  if (message.includes('500') || message.includes('Internal Server Error')) {
    return 'Server ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
  
  return `Technical issue: ${message}‡•§ Support team ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§`;
};

// Determine retry logic
const shouldRetryError = (error: any): boolean => {
  const message = error.message || '';
  
  // Retry for network issues
  return message.includes('fetch') || 
         message.includes('NetworkError') || 
         message.includes('timeout') ||
         message.includes('500') ||
         error.code === 'NETWORK_ERROR';
};
