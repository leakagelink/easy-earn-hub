
import { supabase } from '@/integrations/supabase/client';

export interface AuthResult {
  success: boolean;
  error?: string;
}

// Simple cleanup function
const cleanupAuth = () => {
  try {
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.startsWith('supabase.auth.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
  } catch (error) {
    console.log('Cleanup completed');
  }
};

export const simpleRegister = async (
  email: string, 
  password: string, 
  phone: string, 
  referralCode?: string
): Promise<AuthResult> => {
  try {
    console.log('üöÄ Registration attempt for:', email);
    
    // Basic validation
    if (!email.includes('@')) {
      return { success: false, error: '‡§∏‡§π‡•Ä email address ‡§°‡§æ‡§≤‡•á‡§Ç‡•§' };
    }
    
    if (password.length < 6) {
      return { success: false, error: 'Password ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 6 characters ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§' };
    }
    
    if (phone.length < 10) {
      return { success: false, error: '‡§∏‡§π‡•Ä phone number ‡§°‡§æ‡§≤‡•á‡§Ç‡•§' };
    }

    // Clean up first
    cleanupAuth();

    const { data, error } = await supabase.auth.signUp({
      email: email.trim().toLowerCase(),
      password: password.trim(),
      options: {
        emailRedirectTo: `${window.location.origin}/`,
        data: {
          phone: phone.trim(),
          referral_code: referralCode?.trim() || '',
        }
      }
    });

    if (error) {
      console.error('‚ùå Registration error:', error);
      
      if (error.message.includes('User already registered')) {
        return { success: false, error: '‡§Ø‡§π email ‡§™‡§π‡§≤‡•á ‡§∏‡•á registered ‡§π‡•à‡•§ Login ‡§ï‡§∞‡•á‡§Ç‡•§' };
      }
      
      return { success: false, error: error.message };
    }

    if (data.user) {
      console.log('‚úÖ Registration successful');
      return { success: true };
    }

    return { success: false, error: 'Registration failed' };

  } catch (error: any) {
    console.error('üí• Registration error:', error);
    return { success: false, error: error.message || '‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§' };
  }
};

export const simpleLogin = async (email: string, password: string): Promise<AuthResult> => {
  try {
    console.log('üîë Login attempt for:', email);
    
    // Clean up first
    cleanupAuth();

    const { data, error } = await supabase.auth.signInWithPassword({
      email: email.trim().toLowerCase(),
      password: password.trim(),
    });

    if (error) {
      console.error('‚ùå Login error:', error);
      
      if (error.message.includes('Invalid login credentials')) {
        return { success: false, error: '‡§ó‡§≤‡§§ email ‡§Ø‡§æ password ‡§π‡•à‡•§' };
      }
      
      return { success: false, error: error.message };
    }

    if (data.user) {
      console.log('‚úÖ Login successful');
      return { success: true };
    }

    return { success: false, error: 'Login failed' };

  } catch (error: any) {
    console.error('üí• Login error:', error);
    return { success: false, error: error.message || '‡§ï‡•Å‡§õ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§' };
  }
};

export const simpleLogout = async (): Promise<AuthResult> => {
  try {
    console.log('üö™ Logout attempt...');
    
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      console.error('Logout error:', error);
    }
    
    // Clean up
    cleanupAuth();
    
    console.log('‚úÖ Logout successful');
    return { success: true };
    
  } catch (error: any) {
    console.error('üí• Logout error:', error);
    // Force cleanup anyway
    cleanupAuth();
    return { success: true }; // Always succeed for logout
  }
};
