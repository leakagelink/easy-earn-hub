
import { 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword, 
  signOut,
  updateProfile,
  connectAuthEmulator
} from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { auth, db } from '@/integrations/firebase/client';
import { ExtendedUser } from './types';

export interface AuthOperationsParams {
  setCurrentUser: (user: ExtendedUser | null) => void;
  setIsAdmin: (isAdmin: boolean) => void;
}

export const createAuthOperations = ({ setCurrentUser, setIsAdmin }: AuthOperationsParams) => {
  
  const login = async (email: string, password: string) => {
    console.log('üîë Starting Firebase login for:', email);
    
    try {
      console.log('üöÄ Attempting Firebase login...');
      const userCredential = await signInWithEmailAndPassword(auth, email.trim().toLowerCase(), password);

      if (userCredential.user) {
        console.log('‚úÖ Firebase login successful for:', userCredential.user.email);
        return userCredential;
      } else {
        throw new Error('Login failed - no user returned');
      }
    } catch (error: any) {
      console.error('üí• Firebase login failed:', error);
      throw new Error(getErrorMessage(error));
    }
  };

  const register = async (email: string, password: string, phone: string, referralCode?: string) => {
    console.log('üìù Starting Firebase registration for:', email);
    
    try {
      console.log('üöÄ Attempting Firebase registration...');
      
      // Simple validation first
      if (!email || !password || !phone) {
        throw new Error('‡§∏‡§≠‡•Ä fields ‡§≠‡§∞‡§®‡§æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§');
      }
      
      if (password.length < 6) {
        throw new Error('Password ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 6 characters ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§');
      }
      
      const userCredential = await createUserWithEmailAndPassword(auth, email.trim().toLowerCase(), password);
      
      // Update user profile with additional info
      if (userCredential.user) {
        await updateProfile(userCredential.user, {
          displayName: email.split('@')[0]
        });
        
        // Create user document in Firestore
        await setDoc(doc(db, 'users', userCredential.user.uid), {
          id: userCredential.user.uid,
          email: email.trim().toLowerCase(),
          phone: phone.trim(),
          referralCode: referralCode?.trim() || '',
          createdAt: new Date().toISOString(),
          verified: false,
          isAdmin: false
        });
      }

      if (userCredential.user) {
        console.log('‚úÖ Firebase registration successful for:', userCredential.user.email);
        return userCredential;
      } else {
        throw new Error('Registration failed - no user returned');
      }
    } catch (error: any) {
      console.error('üí• Firebase registration failed:', error);
      throw new Error(getErrorMessage(error));
    }
  };

  const logout = async () => {
    console.log('üö™ Starting Firebase logout...');
    try {
      await signOut(auth);
      setCurrentUser(null);
      setIsAdmin(false);
      console.log('‚úÖ Firebase logout successful');
      window.location.href = '/';
    } catch (error) {
      console.error('‚ùå Firebase logout error:', error);
      setCurrentUser(null);
      setIsAdmin(false);
      window.location.href = '/';
    }
  };

  return { login, register, logout };
};

const getErrorMessage = (error: any): string => {
  if (!error) return 'Unknown error occurred';
  
  const code = error.code || '';
  const message = error.message || error.toString();
  
  console.log('üîç Error details:', { code, message });
  
  // Firebase Auth specific errors
  switch (code) {
    case 'auth/network-request-failed':
      return 'Internet connection ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ Network check ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á try ‡§ï‡§∞‡•á‡§Ç‡•§';
    
    case 'auth/invalid-credential':
    case 'auth/user-not-found':
    case 'auth/wrong-password':
      return '‡§ó‡§≤‡§§ email ‡§Ø‡§æ password ‡§π‡•à‡•§';
    
    case 'auth/email-already-in-use':
      return '‡§Ø‡§π email ‡§™‡§π‡§≤‡•á ‡§∏‡•á registered ‡§π‡•à‡•§ Login ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
    
    case 'auth/weak-password':
      return 'Password ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 6 ‡§Ö‡§ï‡•ç‡§∑‡§∞ ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§';
    
    case 'auth/invalid-email':
      return '‡§∏‡§π‡•Ä email address ‡§°‡§æ‡§≤‡•á‡§Ç‡•§';
    
    case 'auth/too-many-requests':
      return '‡§¨‡§π‡•Å‡§§ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ attempts ‡§π‡•ã ‡§ó‡§è ‡§π‡•à‡§Ç‡•§ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
    
    case 'auth/operation-not-allowed':
      return 'Email/Password authentication enabled ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§';
    
    default:
      // Network errors
      if (message.includes('Failed to fetch') || 
          message.includes('NetworkError') || 
          message.includes('timeout') ||
          message.includes('Connection') ||
          message.includes('CORS')) {
        return 'Network connection ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ Internet check ‡§ï‡§∞‡•á‡§Ç‡•§';
      }
      
      return message || '‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü ‡§π‡•à‡•§ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§';
  }
};
